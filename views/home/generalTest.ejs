<style>
  .timer {
    font-size: 1.8rem;
    font-weight: bold;
  }
  .blinking {
    animation: blink 1s infinite;
    color: red !important;
  }
  @keyframes blink {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0;
    }
  }
  .question-matrix .btn {
    width: 40px;
    height: 40px;
    margin: 3px;
    font-size: 0.9rem;
  }
  .answer-btn {
    min-height: 50px;
    text-align: left;
  }
  .answer-btn.selected {
    background-color: #e7f3ff;
    border: 2px solid #0d6efd;
  }
  .answer-btn.correct {
    background-color: #d4edda;
    border-color: #28a745;
  }
  .answer-btn.wrong {
    background-color: #f8d7da;
    border-color: #dc3545;
  }
  .matrix-btn.answered {
    background-color: #d1e7dd;
  }
  .matrix-btn.correct {
    background-color: #28a745;
    color: white;
  }
  .matrix-btn.wrong {
    background-color: #dc3545;
    color: white;
  }
</style>

<div class="container py-4">
  <h2 class="text-center mb-4 text-primary">Bài thi Trắc Nghiệm</h2>

  <div class="row">
    <!-- Cột trái: Matrix câu hỏi + Timer + Điểm -->
    <div class="col-md-3">
      <div class="card shadow-sm mb-3">
        <div class="card-body text-center">
          <div id="timer" class="timer text-primary">30:00</div>
          <button id="startBtn" class="btn btn-success mt-2">Bắt đầu</button>
          <div
            id="score"
            class="mt-3 fw-bold text-success"
            style="display: none"
          ></div>
        </div>
      </div>

      <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">Danh sách câu hỏi</div>
        <div class="card-body p-2">
          <div
            id="questionMatrix"
            class="d-flex flex-wrap justify-content-center question-matrix"
          ></div>
        </div>
      </div>
    </div>

    <!-- Cột phải: Câu hỏi + Đáp án + Nút điều hướng -->
    <div class="col-md-9">
      <div class="card shadow-sm">
        <div class="card-body">
          <div id="questionContainer">
            <h5 id="questionText" class="mb-4"></h5>
            <div id="options" class="space-y-2"></div>

            <div class="d-flex justify-content-between mt-4">
              <button id="prevBtn" class="btn btn-secondary" disabled>
                Quay lại
              </button>
              <button
                id="submitBtn"
                class="btn btn-danger"
                style="display: none"
              >
                Nộp bài
              </button>
              <button id="nextBtn" class="btn btn-primary">Tiếp</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Dữ liệu mẫu 50 câu (thay bằng dữ liệu thật từ server nếu cần)
  const questions = Array.from({ length: 50 }, (_, i) => ({
    id: i + 1,
    text: `Câu ${i + 1}: Đây là câu hỏi ví dụ số ${
      i + 1
    }. Thủ đô của Việt Nam là gì?`,
    options: [
      { label: "A", text: i % 4 === 0 ? "TP. Hồ Chí Minh" : "Hà Nội" },
      { label: "B", text: "Đà Nẵng" },
      { label: "C", text: i % 4 === 0 ? "Hà Nội" : "TP. Hồ Chí Minh" },
      { label: "D", text: "Hải Phòng" },
    ],
    correct: i % 4 === 0 ? "C" : "A", // Đáp án đúng luân phiên
  }));

  let currentQuestion = 0;
  let answers = {}; // Lưu đáp án người dùng: {1: 'A', 2: 'B', ...}
  let timerInterval = null;
  let timeLeft = 30 * 60; // 30 phút
  let isSubmitted = false;

  const timerEl = document.getElementById("timer");
  const startBtn = document.getElementById("startBtn");
  const questionText = document.getElementById("questionText");
  const optionsContainer = document.getElementById("options");
  const prevBtn = document.getElementById("prevBtn");
  const nextBtn = document.getElementById("nextBtn");
  const submitBtn = document.getElementById("submitBtn");
  const scoreEl = document.getElementById("score");
  const matrixContainer = document.getElementById("questionMatrix");

  // Tạo matrix câu hỏi
  function renderMatrix() {
    matrixContainer.innerHTML = "";
    questions.forEach((q, idx) => {
      const btn = document.createElement("button");
      btn.className = "btn matrix-btn";
      btn.textContent = idx + 1;
      btn.onclick = () => goToQuestion(idx);
      matrixContainer.appendChild(btn);
    });
  }

  // Cập nhật trạng thái matrix
  function updateMatrix() {
    const buttons = matrixContainer.querySelectorAll(".matrix-btn");
    buttons.forEach((btn, idx) => {
      const qid = idx + 1;
      btn.classList.remove("answered", "correct", "wrong");
      if (answers[qid]) {
        btn.classList.add("answered");
        if (isSubmitted) {
          btn.classList.add(
            answers[qid] === questions[idx].correct ? "correct" : "wrong"
          );
        }
      }
      if (currentQuestion === idx) {
        btn.classList.add("btn-primary");
      } else {
        btn.classList.remove("btn-primary");
      }
    });
  }

  // Hiển thị câu hỏi
  function showQuestion(index) {
    const q = questions[index];
    questionText.textContent = q.text;
    optionsContainer.innerHTML = "";

    q.options.forEach((opt) => {
      const btn = document.createElement("button");
      btn.className = "btn answer-btn w-100 mb-2";
      btn.innerHTML = `<strong>${opt.label}.</strong> ${opt.text}`;
      btn.onclick = () => selectAnswer(q.id, opt.label, btn);

      // Nếu đã chọn hoặc đã nộp
      if (answers[q.id] === opt.label) {
        btn.classList.add("selected");
      }
      if (isSubmitted) {
        btn.disabled = true;
        if (opt.label === q.correct) {
          btn.classList.add("correct");
        } else if (answers[q.id] === opt.label && opt.label !== q.correct) {
          btn.classList.add("wrong");
        }
      }

      optionsContainer.appendChild(btn);
    });

    // Cập nhật nút điều hướng
    prevBtn.disabled = index === 0;
    nextBtn.disabled = index === questions.length - 1;
    submitBtn.style.display =
      Object.keys(answers).length === 50 ? "block" : "none";

    updateMatrix();
  }

  // Chọn đáp án
  function selectAnswer(qid, choice, btn) {
    if (isSubmitted) return;
    answers[qid] = choice;

    // Cập nhật giao diện chọn
    document.querySelectorAll(`#options .answer-btn`).forEach((b) => {
      b.classList.remove("selected");
    });
    btn.classList.add("selected");

    updateMatrix();
    submitBtn.style.display =
      Object.keys(answers).length === 50 ? "block" : "none";
  }

  // Chuyển câu
  function goToQuestion(index) {
    if (isSubmitted) return;
    currentQuestion = index;
    showQuestion(index);
  }

  // Timer
  function startTimer() {
    timerInterval = setInterval(() => {
      timeLeft--;
      const mins = Math.floor(timeLeft / 60)
        .toString()
        .padStart(2, "0");
      const secs = (timeLeft % 60).toString().padStart(2, "0");
      timerEl.textContent = `${mins}:${secs}`;

      // Nhấp nháy khi còn 10s
      if (timeLeft <= 10) {
        timerEl.classList.add("blinking");
      }

      // Hết giờ
      if (timeLeft <= 0) {
        clearInterval(timerInterval);
        timerEl.textContent = "Hết giờ";
        submitExam();
      }
    }, 1000);
  }

  // Nộp bài
  function submitExam() {
    clearInterval(timerInterval);
    isSubmitted = true;
    startBtn.disabled = true;
    submitBtn.style.display = "none";
    prevBtn.disabled = true;
    nextBtn.disabled = true;

    let correctCount = 0;
    questions.forEach((q) => {
      if (answers[q.id] === q.correct) correctCount++;
    });

    const score = (correctCount * 0.2).toFixed(1);
    scoreEl.style.display = "block";
    scoreEl.innerHTML = `
      <div>Đúng: <strong>${correctCount}/50</strong> câu</div>
      <div class="fs-4">Tổng điểm: <strong>${score}</strong></div>
    `;

    showQuestion(currentQuestion); // Cập nhật lại giao diện câu hiện tại
  }

  // Sự kiện nút
  startBtn.onclick = () => {
    startBtn.textContent = "Đang làm bài...";
    startBtn.disabled = true;
    startTimer();
    renderMatrix();
    showQuestion(0);
  };

  prevBtn.onclick = () => {
    if (currentQuestion > 0) goToQuestion(currentQuestion - 1);
  };

  nextBtn.onclick = () => {
    if (currentQuestion < questions.length - 1)
      goToQuestion(currentQuestion + 1);
  };

  submitBtn.onclick = submitExam;

  // Khởi tạo
  renderMatrix();
</script>
